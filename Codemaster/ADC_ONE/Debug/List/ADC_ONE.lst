*******************************************************************************
*                                                                             *
*              K1874BE96T C CROSS COMPILER Version 2.00.151126                *
*                          Copyright (C) 2012 NIIET                           *
*                                                                             *
*******************************************************************************

Warning[C17] .\ADC_ONE.c(110,38): Call to function 'inverse' without prototype
Warning[C17] .\ADC_ONE.c(159,54): Call to function 'inverse' without prototype
Warning[C24] .\ADC_ONE.c(161,51): Conversion may loose significant digits
Warning[C17] .\ADC_ONE.c(191,54): Call to function 'inverse' without prototype
Warning[C24] .\ADC_ONE.c(193,51): Conversion may loose significant digits
Warning[C5] .\ADC_ONE.c(14,21): Bad #pragma interrupt
Warning[C166] .\ADC_ONE.c(15,20): Function declared in #pragma interrupt must return void and have no parameters
Warning[C78] .\ADC_ONE.c(15,20): Undefined function 'IRQ_uart_rx_tx' in #pragma interrupt
Warning[C137] .\ADC_ONE.c(109,0): Unreachable code in function 'first_start'
Warning[C137] .\ADC_ONE.c(155,0): Unreachable code in function 'main'
Warning[C83] .\ADC_ONE.c(79,0): Parameter 'spcon' is never used in function 'USART1_Init'
Warning[C144] .\ADC_ONE.c(227,0): 'tmp' declared but never used in function 'main'
                    adc_init:
;FILE: .\ADC_ONE.c
;000052    void adc_init(unsigned char achannel)
;000054      ADC_EN = 0x05;
00000000    B1051D                         	LDB   _AH,#05h
00000003    C70100001D                     	STB   _AH,ADC_EN
;000055      ADC_CON = 0x01 | adc_mode | (achannel << 3);
00000008    19031C                         	SHLB  achannel?adc_init,#03h
0000000B    930116001C                     	ORB   achannel?adc_init,adc_mode
00000010    91011C                         	ORB   achannel?adc_init,#01h
00000013    C70100001C                     	STB   achannel?adc_init,ADC_CON
;000056    }
00000018    F0                             	RET   
.ENDF
                     adc_off:
;000059    void adc_off()
;000061      ADC_EN = 0x00;
00000019    C701000000                     	STB   00h,ADC_EN
;000062    }
0000001E    F0                             	RET   
.ENDF
                 USART1_Init:
;000066    void USART1_Init(unsigned char spcon)
;000069      WSR=15;
0000001F    B10F00                         	LDB   WSR,#0Fh
;000070      reg=IOC1;
00000022    B0001C                         	LDB   reg?USART1_Init,IOC1
;000071      reg|=0x20;
00000025    91201C                         	ORB   reg?USART1_Init,#20h
;000072      WSR=0;
00000028    1100                           	CLRB  WSR
;000073      IOC1=reg;
0000002A    B01C00                         	LDB   IOC1,reg?USART1_Init
;000074      SP_CON1=0x09;
0000002D    B1091C                         	LDB   _AL,#09h
00000030    C70100001C                     	STB   _AL,SP_CON1
;000075      BAUD_RATE1 = BAUD_LO_VAL;  //write Baud rate value
00000035    B1811C                         	LDB   _AL,#81h
00000038    C70100001C                     	STB   _AL,BAUD_RATE1
;000076      BAUD_RATE1 = BAUD_HI_VAL;
0000003D    B1801C                         	LDB   _AL,#80h
00000040    C70100001C                     	STB   _AL,BAUD_RATE1
;000077      __NOP();
00000045    FD                             	NOP   
;000078      __NOP();
00000046    FD                             	NOP   
;000079    }
00000047    F0                             	RET   
.ENDF
                  init_Timer:
;000083    void init_Timer(void){
;000086      tmp = WSR;
00000048    B0001C                         	LDB   tmp?init_Timer,WSR
;000087      WSR = (tmp & 0x80);
0000004B    51801C1D                       	ANDB  _AH,tmp?init_Timer,#80h
0000004F    B01D00                         	LDB   WSR,_AH
;000088      IOC1 = 0x25;
00000052    B12500                         	LDB   IOC1,#25h
;000089      tmp1 = INT_MASK;
00000055    B0001D                         	LDB   tmp1?init_Timer,INT_MASK
;000090      tmp1 |= 0x01;
00000058    91011D                         	ORB   tmp1?init_Timer,#01h
;000091      INT_MASK = tmp1;
0000005B    B01D00                         	LDB   INT_MASK,tmp1?init_Timer
;000092      WSR = (tmp & 0x80) | 0xF;
0000005E    51801C1D                       	ANDB  _AH,tmp?init_Timer,#80h
00000062    910F1D                         	ORB   _AH,#0Fh
00000065    B01D00                         	LDB   WSR,_AH
;000093      TIMER1 = 0x0001;
00000068    AD0100                         	LDBZE TIMER1,#01h
;000094      WSR = (tmp & 0x80);
0000006B    71801C                         	ANDB  tmp?init_Timer,#80h
0000006E    B01C00                         	LDB   WSR,tmp?init_Timer
;000095                         }
00000071    F0                             	RET   
.ENDF
                 first_start:
;000099     void first_start ()
;000102            for (k=0;k<3;k++)
00000072    C701170000                     	STB   00h,k
00000077    2016                           	SJMP  ??_1_CHECK
                   ??_1_LOOP:
;000103                    {
;000104                    adc_init(k);
00000079    B30117001C                     	LDB   _AL,k
0000007E    2F80                           	SCALL adc_init
;000105                    __NOP ();
00000080    FD                             	NOP   
;000106                    __NOP ();
00000081    FD                             	NOP   
;000107                    __NOP ();
00000082    FD                             	NOP   
;000108                    if ( ADC_RESULT&0x8000==0)
;000109                            {
;000110                            mas[k]=inverse(ADC_RESULT);
;000111                            }
;000112                    }
00000083    B30117001C                     	LDB   _AL,k
00000088    171C                           	INCB  _AL
0000008A    C70117001C                     	STB   _AL,k
                  ??_1_CHECK:
0000008F    B30117001C                     	LDB   _AL,k
00000094    99031C                         	CMPB  _AL,#03h
00000097    D3E0                           	JNC   ??_1_LOOP
;000114     }
00000099    F0                             	RET   
.ENDF
                        main:
;000116    void main ()
;000120    __EI();
0000009A    FB                             	EI    
;000123      adc_mode=(0x00 << 1);
0000009B    C701160000                     	STB   00h,adc_mode
;000124      i=3;
000000A0    AD031C                         	LDBZE _AX,#03h
000000A3    C30112001C                     	ST    _AX,i
;000125      first_start();
000000A8    2FC8                           	SCALL first_start
;000126      k=0;
000000AA    C701170000                     	STB   00h,k
;000128      USART1_Init(SP_MODE_1);
000000AF    B1091C                         	LDB   _AL,#09h
000000B2    2F6B                           	SCALL USART1_Init
;000129      timer_convertion=0;
000000B4    C7011A0000                     	STB   00h,timer_convertion
;000130      init_Timer();
000000B9    2F8D                           	SCALL init_Timer
;000131      adc_init(k);
000000BB    B30117001C                     	LDB   _AL,k
000000C0    2F3E                           	SCALL adc_init
;000133      while (1)
                     ??_2_DO:
;000134    {
;000135        if (timer_convertion==1)
000000C2    B3011A001C                     	LDB   _AL,timer_convertion
000000C7    99011C                         	CMPB  _AL,#01h
000000CA    D7F6                           	JNE   ??_2_DO
;000136        {
;000137                     timer_convertion=0;
000000CC    C7011A0000                     	STB   00h,timer_convertion
;000138                     status_uart = SP_STAT1;    //запоминаем регистр статуса
000000D1    B30100001C                     	LDB   _AL,SP_STAT1
000000D6    C70119001C                     	STB   _AL,status_uart
;000139                            if (status_uart&0x40)
000000DB    71401C                         	ANDB  _AL,#40h
000000DE    98001C                         	CMPB  _AL,0
000000E1    DF0A                           	JE    ??_4_ELSE
;000140                                    {
;000141                                    ByteReceived = SBUF_RX1;
000000E3    B30100001C                     	LDB   _AL,SBUF_RX1
000000E8    C70114001C                     	STB   _AL,ByteReceived
;000142                                    }
                   ??_4_ELSE:
;000144                    if  (ByteReceived==228)
000000ED    B30114001C                     	LDB   _AL,ByteReceived
000000F2    99E41C                         	CMPB  _AL,#0E4h
000000F5    D702                           	JNE   ??_5_ELSE
;000145                            {
;000146                            __NOP ();
000000F7    FD                             	NOP   
;000147                            __NOP ();
000000F8    FD                             	NOP   
;000148                            }
                   ??_5_ELSE:
;000151                    if (ByteReceived==13)    //разрешение передачи данных по УАРТ
000000F9    990D1C                         	CMPB  _AL,#0Dh
;000152                            {
;000153                            if (ADC_RESULT&0x8000==0)
;000154                                    {
;000155                                    if (k<2)
;000156                                            {
;000158                                            i++;
;000159                                            ADCRES=inverse(ADC_RESULT);
;000160                                            mas[k]=mas[k]+(1-alfa)*(ADCRES-mas[k]);
;000161                                            clon=mas[k];
;000163                                            SBUF_TX1 =k;
;000164                                            __NOP ();
;000165                                            __NOP ();
;000167                                            while (clon!=0)
;000183                                            __NOP ();
;000184                                            __NOP ();
;000186                                            k++;
;000187                                            adc_init(k);
;000188                                            } //if k<2
;000190                                            {
;000191                                            ADCRES=inverse(ADC_RESULT);
;000192                                            mas[k]=mas[k]+(1-alfa)*(ADCRES-mas[k]);
;000193                                            clon=mas[k];
;000196                                            SBUF_TX1 =k;
;000197                                            __NOP ();
;000198                                            __NOP ();
;000199                                            while (clon!=0)
;000213                                            __NOP ();
;000214                                            __NOP ();
;000217                                            k=0 ;
;000218                                            i++;
;000219                                            adc_convertion = 0;
;000220                                            adc_init(k);
;000221                                            }  //else (k>=2)
;000222                                    }//ADC_RESULT&0x8000==0
;000224                            }//if (ByteReceived==13)
;000225        } //if (timer_convertion==1)
;000226    }// while (1)
000000FC    27C4                           	SJMP  ??_2_DO
;000227    }//main
.ENDF
                ?INTERRUPT00:
                   timer_irq:
;000230        void    timer_irq()
00000000    F4                             	PUSHA 
00000001    C81C                           	PUSH  _AX
;000232            timer_convertion=1;
00000003    B1011C                         	LDB   _AL,#01h
00000006    C7011A001C                     	STB   _AL,timer_convertion
;000233            TIMER1 = 0x0001;
0000000B    AD0100                         	LDBZE TIMER1,#01h
;000234            }
0000000E    CC1C                           	POP   _AX
00000010    F5                             	POPA  
00000011    F0                             	RET   
.ENDF

.\ADC_ONE.c: 272 byte(s), 2975 line(s), 0 error(s), 12 warning(s)

